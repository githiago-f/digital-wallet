{"version":3,"sources":["assets/images/icons/exchange.svg","pages/Home/index.tsx","app/routes.tsx","components/StyleBase/index.tsx","components/LeftCard/index.tsx","components/RightCard/index.tsx","components/ConverterButton/index.tsx","components/Cards/index.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Home","Routes","exact","path","component","BaseTheme","createGlobalStyle","LeftCard","title","subtitle","className","RightCard","ConvertButton","src","exchange","alt","Cards","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,sC,mNCQ5BC,EANF,WACT,OACI,4CCAKC,EAAS,WAClB,OACI,oCACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,O,qwBCNjD,IAgCeK,EAhCGC,YAAH,KCCFC,G,MAAW,SAAC,GAGN,IAFfC,EAEc,EAFdA,MACAC,EACc,EADdA,SAEA,OACI,6BACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,gBACX,4BAAKF,GACL,4BAAKC,SCZhBE,G,MAAY,SAAC,GAGP,IAFfH,EAEc,EAFdA,MACAC,EACc,EADdA,SAEA,OACI,6BACI,yBAAKC,UAAU,cACX,yBAAKA,UAAU,WACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,gBACX,4BAAKF,GACL,4BAAKC,S,iBCXhBG,G,MAAgB,WACzB,OACI,yBAAKF,UAAU,mBACX,gCAAQ,yBAAKG,IAAKC,IAAUC,IAAI,SCD/BC,G,MAAQ,SAAC,GAGH,IAFfR,EAEc,EAFdA,MACAC,EACc,EADdA,SAEA,OACI,yBAAKC,UAAU,iBACX,kBAAC,EAAD,CAAUF,MAAOA,EAAOC,SAAUA,IAClC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWD,MAAM,QAAQC,SAAUA,OCChCQ,MAVf,WACI,OACI,oCACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOT,MAAM,SAASC,SAAS,eCEvBS,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCbRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDkIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.55e53f7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/exchange.58165cbd.svg\";","import React from 'react';\n\nconst Home = () => {\n    return(\n        <h1>Hello World</h1>\n    );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Route,  BrowserRouter as Router } from 'react-router-dom';\nimport Home from 'pages/Home';\n\nexport const Routes = () => {\n    return (\n        <>\n            <Router>\n                <Route exact path=\"/\" component={Home}/>\n            </Router>\n        </>\n    );\n};\n","import { createGlobalStyle } from 'styled-components';\n\nconst BaseTheme = createGlobalStyle`\n    @import url('https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,700;1,400&display=swap');\n\n    :root{\n        /*  Theme styles */\n        --primary-dark:#1F2326;\n        --secondary-dark:#272B2E;\n\n        --light-blue:#57A2ED;\n        --light-cian:#6CD9E9;\n\n        --light-yellow:#F8CB84;\n        --light-red:#FE7E7C;\n\n        /* Text theme style */\n        --text-white:#fff;\n        --text-color:#C4C4C4;\n    }\n\n    * {\n        margin: 0;\n        padding: 0;\n        box-sizing:border-box;\n    }\n\n    body{\n        font-family: 'Roboto', sans-serif;\n        background-color:var(--primary-dark);\n        color:var(--text-color);\n    }\n`;\n\nexport default BaseTheme;\n","import React from 'react';\nimport './styles.scss';\n\nexport const LeftCard = ({\n    title,\n    subtitle,\n}: ICardProps) => {\n    return (\n        <div>\n            <div className=\"card\">\n                <div className=\"border\"></div>\n                <div className=\"content\">\n                    <div className=\"icon\"></div>\n                    <div className=\"text-element\">\n                        <h2>{title}</h2>\n                        <h3>{subtitle}</h3>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React from 'react';\nimport './styles.scss';\n\nexport const RightCard = ({\n    title,\n    subtitle,\n}: ICardProps) => {\n    return (\n        <div>\n            <div className=\"right-card\">\n                <div className=\"border\"></div>\n                <div className=\"content\">\n                    <div className=\"icon\"></div>\n                    <div className=\"text-element\">\n                        <h2>{title}</h2>\n                        <h3>{subtitle}</h3>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    );\n};\n","import React from 'react';\nimport exchange from '../../assets/images/icons/exchange.svg';\nimport './styles.scss';\n\nexport const ConvertButton = () => {\n    return (\n        <div className=\"convert__button\">\n            <button><img src={exchange} alt=\"\" /></button>\n        </div>\n    );\n};\n","import React from 'react';\nimport { LeftCard } from 'components/LeftCard';\nimport { RightCard } from 'components/RightCard';\nimport { ConvertButton } from 'components/ConverterButton';\nimport './styles.scss';\n\nexport const Cards = ({\n    title,\n    subtitle,\n}: ICardProps) => {\n    return (\n        <div className=\"cards-wrapper\">\n            <LeftCard title={title} subtitle={subtitle} />\n            <ConvertButton />\n            <RightCard title=\"right\" subtitle={subtitle} />\n        </div>\n    );\n};\n","import React from 'react';\nimport { Routes } from 'app/routes';\nimport BaseTheme from 'components/StyleBase';\nimport { Cards } from 'components/Cards';\n\nfunction App() {\n    return (\n        <>\n            <BaseTheme />\n            <Routes />\n            <Cards title=\"titulo\" subtitle=\"subtitle\"></Cards>\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'app/App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}